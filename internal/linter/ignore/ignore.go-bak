package ignore

import (
    "regexp"
    "strings"
)

// IgnoreManager manages the rules to be ignored at the line level or globally.
type IgnoreManager struct {
    DisabledRules map[string]bool
    LineIgnores   map[int]map[string]bool
}

// NewIgnoreManager creates a new IgnoreManager.
func NewIgnoreManager() *IgnoreManager {
    return &IgnoreManager{
        DisabledRules: make(map[string]bool),
        LineIgnores:   make(map[int]map[string]bool),
    }
}

// ProcessDirectives processes the lines and returns any necessary ignore data (disabled rules, line-specific ignores).
func (im *IgnoreManager) ProcessDirectives(lines []string) {
    for i, line := range lines {
        trimmed := strings.TrimSpace(line)

        if matches := parseDirective(trimmed, `^//\s*lint-ignore\s+([A-Z0-9, ]+)$`); matches != nil {
            ruleList := strings.Split(matches[1], ",")
            for _, rule := range ruleList {
                rule = strings.TrimSpace(rule)
                if im.LineIgnores[i+1] == nil {
                    im.LineIgnores[i+1] = make(map[string]bool)
                }
                im.LineIgnores[i+1][rule] = true
            }
        }

        if matches := parseDirective(trimmed, `^//\s*lint-disable\s+([A-Z0-9, ]+)$`); matches != nil {
            ruleList := strings.Split(matches[1], ",")
            for _, rule := range ruleList {
                im.DisabledRules[strings.TrimSpace(rule)] = true
            }
        }

        if matches := parseDirective(trimmed, `^//\s*lint-enable\s+([A-Z0-9, ]+)$`); matches != nil {
            ruleList := strings.Split(matches[1], ",")
            for _, rule := range ruleList {
                delete(im.DisabledRules, strings.TrimSpace(rule))
            }
        }
    }
}

// parseDirective uses regex to extract the directive and its parameters.
func parseDirective(line string, pattern string) []string {
    re := regexp.MustCompile(pattern)
    return re.FindStringSubmatch(line)
}

// IsRuleIgnored checks if a specific rule is ignored for the given line.
func (im *IgnoreManager) IsRuleIgnored(line int, ruleName string) bool {
    return im.LineIgnores[line] != nil && im.LineIgnores[line][ruleName]
}

// IsRuleDisabled checks if a specific rule is globally disabled.
func (im *IgnoreManager) IsRuleDisabled(ruleName string) bool {
    _, disabled := im.DisabledRules[ruleName]
    return disabled
}
